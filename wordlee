<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<!-- Make it mobile-first and notch-safe -->
<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
<meta name="theme-color" content="#121213" />
<link rel="manifest" href="manifest.json" />
<link rel="icon" href="icon-192.png" />
<title>Wordle – Common-Answer Picker</title>
<style>
:root{--bg:#121213;--tile:#3a3a3c;--absent:#3a3a3c;--present:#b59f3b;--correct:#538d4e;--text:#d7dadc;--key:#818384;--key-text:#fff}
*{box-sizing:border-box}
html,body{height:100%}
body{margin:0;background:var(--bg);color:var(--text);font-family:system-ui,-apple-system,Segoe UI,Roboto,Inter,Ubuntu,Arial,sans-serif;display:flex;flex-direction:column;min-height:100vh;align-items:center}
header{width:100%;max-width:520px;padding:10px;border-bottom:1px solid #2a2a2b;position:sticky;top:0;background:var(--bg);z-index:2}
#bar{display:flex;gap:8px;align-items:center;justify-content:space-between}
h1{margin:0;font-size:18px;letter-spacing:.12em}
.btn{background:#2f2f31;color:var(--text);border:1px solid #444;padding:8px 10px;border-radius:6px;cursor:pointer;font-weight:600}
.btn:hover{filter:brightness(1.1)}
main{width:100%;max-width:520px;padding:14px 8px 24px;display:flex;flex-direction:column;gap:14px}
#board{display:grid;grid-template-rows:repeat(6,1fr);gap:8px;width:100%;aspect-ratio:5/6;max-height:min(70vh,520px)}
.row{display:grid;grid-template-columns:repeat(5,1fr);gap:8px}
.tile{border:2px solid #3a3a3c;display:grid;place-items:center;font-weight:800;font-size:clamp(18px,3.8vw,28px);text-transform:uppercase;user-select:none;background:#121213}
.tile.filled{border-color:#565758}
.tile.flip{animation:flip 520ms ease-in-out}
@keyframes flip{0%{transform:rotateX(0)}50%{transform:rotateX(90deg)}100%{transform:rotateX(0)}}
.state-absent{background:var(--absent)!important;border-color:var(--absent)!important;color:#fff}
.state-present{background:var(--present)!important;border-color:var(--present)!important;color:#fff}
.state-correct{background:var(--correct)!important;border-color:var(--correct)!important;color:#fff}
#keyboard{display:grid;gap:8px;user-select:none}
.kb-row{display:flex;justify-content:center;gap:6px}
.key{background:var(--key);color:var(--key-text);border:none;border-radius:6px;padding:12px 10px;min-width:32px;font-weight:700;cursor:pointer;flex:0 0 auto}
.key.small{font-size:12px;padding:12px 8px}
.key.hint-correct{background:var(--correct)} .key.hint-present{background:var(--present)} .key.hint-absent{background:#3a3a3c}
#toast{position:fixed;top:72px;left:50%;transform:translateX(-50%);background:#222;color:#fff;padding:10px 14px;border-radius:6px;opacity:0;pointer-events:none;transition:opacity .2s ease;z-index:3;font-weight:600}
#toast.show{opacity:1}
#meta{display:flex;gap:10px;align-items:center;font-size:12px;opacity:.85}
.toggle{display:inline-flex;gap:6px;align-items:center}
@media (max-width:420px){.key{padding:10px 8px;min-width:28px}header{padding:8px}}
/* iOS safe-area inset for full-screen PWA */
main,header{padding-left:calc(env(safe-area-inset-left,0) + 8px);padding-right:calc(env(safe-area-inset-right,0) + 8px)}
</style>
</head>
<body>
<header>
  <div id="bar">
    <div style="display:flex;gap:6px;align-items:center">
      <button id="btnNew" class="btn">New Game</button>
      <button id="btnRefresh" class="btn">Refresh</button>
      <button id="btnGiveUp" class="btn">Give Up</button>
    </div>
    <h1>WORDLE</h1>
    <div id="meta">
      <label class="toggle" title="Accept any 5-letter guess, even if not in list">
        <input type="checkbox" id="allowAnyGuess" checked /> Allow any guess
      </label>
      <span id="statAllowed"></span><span>•</span><span id="statAnswers"></span>
    </div>
  </div>
</header>

<main>
  <div id="board"></div>
  <div id="keyboard"></div>
</main>
<div id="toast"></div>

<script>
/* ====== WORD BANKS (fill these later) ====== */
const RAW_ALLOWED_BANK = `
`;
const RAW_ANSWER_BANK = `
`;

/* === SETTINGS =============================================================== */
const ANSWER_LIMIT = 2000;
const COMMON_FILTERS = {
  minVowels: 0,
  countYAsVowel: true,
  disallowQWithoutU: false,
  maxWeirdLetters: 5,
  maxConsonantRun: 5,
  requireCommonBigram: false,
  banNamey: false
};
const FILTERS_ENABLED = false;

/* ---------- cleaning + dedupe ---------- */
function cleanWordList(raw){
  const seen = new Set();
  let dupes = 0;
  for (let line of raw.split(/\r?\n/)){
    if (!line) continue;
    line = line.normalize('NFKD').replace(/[\u0300-\u036f]/g,'');
    const w = line.trim().toLowerCase();
    if (!/^[a-z]{5}$/.test(w)) continue;
    if (seen.has(w)) dupes++; else seen.add(w);
  }
  const list = Array.from(seen);
  const sa = document.getElementById('statAllowed');
  if (sa) sa.textContent = `Allowed: ${list.length}${dupes?` (−${dupes} dupes)`:''}`;
  if (dupes) setTimeout(()=>toast(`Removed ${dupes} duplicate${dupes>1?'s':''}`), 80);
  return list;
}

/* ---------- commonness filters ---------- */
const HIGH_FREQ_BIGRAMS = new Set([
  "th","he","in","er","an","re","on","at","en","nd","st","to","ed","it","ou","ha",
  "es","is","or","te","ar","as","ea","le","ve","co","me","de","hi","ri","ro","ic","ne","al"
]);
function isNamey(w){
  if (!FILTERS_ENABLED) return false;
  if (/^[a-z]+(ie|ey)$/.test(w)) return true;
  if (/^[bcdfghjklmnpqrstvwxyz]{2,}y$/.test(w)) return true;
  if (/^(cath|beth|joan|jean|kath|marg|sara|dian|kyle)/.test(w)) return true;
  return false;
}
function passesCommonFilters(w){
  if (!FILTERS_ENABLED) return true;
  const vowels = COMMON_FILTERS.countYAsVowel ? 'aeiouy' : 'aeiou';
  const vcount = [...w].filter(ch => vowels.includes(ch)).length;
  if (vcount < COMMON_FILTERS.minVowels) return false;
  if (COMMON_FILTERS.disallowQWithoutU && w.includes('q') && !w.includes('qu')) return false;
  if (COMMON_FILTERS.banNamey && isNamey(w)) return false;
  const weird = [...w].filter(ch => 'qjzx'.includes(ch)).length;
  if (weird > COMMON_FILTERS.maxWeirdLetters) return false;
  const consRun = w.replace(/[aeiou]/g,' ').split(' ').reduce((m,s)=>Math.max(m,s.length),0);
  if (consRun > COMMON_FILTERS.maxConsonantRun) return false;
  if (COMMON_FILTERS.requireCommonBigram){
    let ok=false; for (let i=0;i<4;i++){ if (HIGH_FREQ_BIGRAMS.has(w.slice(i,i+2))) {ok=true;break;} }
    if (!ok) return false;
  }
  return true;
}

/* ---------- stats + scoring ---------- */
function computeStats(words){
  const letters = Object.create(null);
  const bigrams = Object.create(null);
  const pos = Array.from({length:5}, ()=> Object.create(null));
  for (const w of words){
    for (let i=0;i<5;i++){
      const ch=w[i];
      letters[ch]=(letters[ch]||0)+1;
      pos[i][ch]=(pos[i][ch]||0)+1;
      if (i<4){ const bi=w.slice(i,i+2); bigrams[bi]=(bigrams[bi]||0)+1; }
    }
  }
  return {letters,bigrams,pos};
}
const L = n => Math.log((n||0)+1);
function scoreWord(w, stats){
  const {letters,bigrams,pos} = stats;
  let s = 0;
  for (let i=0;i<5;i++){
    const ch = w[i];
    s += 1.0*L(letters[ch]) + 0.8*L(pos[i][ch]);
    if (i<4) s += 0.6*L(bigrams[w.slice(i,i+2)]);
  }
  const uniq = new Set(w).size;
  const vcount = [...w].filter(ch=>'aeiou'.includes(ch)).length;
  s += 0.6*uniq + 1.2*vcount;
  if (w.includes('q')) s -= 2.5;
  if (w.includes('j')) s -= 1.8;
  if (w.includes('z')) s -= 1.6;
  if (w.includes('x')) s -= 1.2;
  return s;
}

/* ===== BUILD LISTS ===== */
const _clean =
  (typeof cleanWordListV2 === 'function') ? cleanWordListV2 :
  (typeof cleanWordList   === 'function') ? cleanWordList   :
  (raw => {
    const seen = new Set();
    for (let line of raw.split(/\r?\n/)){
      if (!line) continue;
      line = line.normalize('NFKD').replace(/[\u0300-\u036f]/g,'');
      const w = line.trim().toLowerCase();
      if (/^[a-z]{5}$/.test(w)) seen.add(w);
    }
    return Array.from(seen);
  });

const ALLOWED_LIST = _clean(RAW_ALLOWED_BANK);
const ALLOWED = new Set(ALLOWED_LIST);
let ANSWERS = _clean(RAW_ANSWER_BANK);
// ensure answers are allowed too
for (const w of ANSWERS) ALLOWED.add(w);
// fallback if curated empty
if (ANSWERS.length === 0) {
  console.warn("Curated answers empty after cleaning; falling back to ALLOWED_LIST.");
  ANSWERS = ALLOWED_LIST.slice();
}
(function shuffle(a){ for(let i=a.length-1;i>0;i--){ const j=(Math.random()*(i+1)|0); [a[i],a[j]]=[a[j]]; } })(ANSWERS);
const _sa = document.getElementById('statAllowed'); if (_sa) _sa.textContent = `Allowed: ${ALLOWED.size}`;
const _sn = document.getElementById('statAnswers'); if (_sn) _sn.textContent = `Answers: ${ANSWERS.length}`;

/* ======================== GAME STATE ======================== */
const ROWS = 6, COLS = 5;
let solution = pickRandom();
let row = 0, col = 0, gameOver = false;
const board = [];

/* ======================== BUILD BOARD ======================= */
const boardEl = document.getElementById('board');
for (let r=0;r<ROWS;r++){
  const rowEl = document.createElement('div'); rowEl.className='row';
  board[r]=[];
  for (let c=0;c<COLS;c++){
    const t=document.createElement('div'); t.className='tile';
    rowEl.appendChild(t); board[r][c]=t;
  }
  boardEl.appendChild(rowEl);
}

/* ======================== KEYBOARD ========================== */
const keyboardLayout=[ "qwertyuiop".split(""), "asdfghjkl".split(""), ["Enter",..."zxcvbnm".split(""),"Back"] ];
const keyboardEl=document.getElementById('keyboard');
for(const krow of keyboardLayout){
  const r=document.createElement('div'); r.className='kb-row';
  for(const key of krow){
    const btn=document.createElement('button'); btn.className='key';
    btn.textContent=key.length===1?key.toUpperCase():key;
    if(key==="Enter"||key==="Back") btn.classList.add('small');
    btn.dataset.key=key; btn.addEventListener('click',()=>onKey(key)); r.appendChild(btn);
  }
  keyboardEl.appendChild(r);
}

/* ======================== CONTROLS ========================== */
document.addEventListener('keydown', (e)=>{
  if(gameOver) return;
  if(e.key==='Backspace'){ onKey('Back'); return; }
  if(e.key==='Enter'){ onKey('Enter'); return; }
  const ch=e.key.toLowerCase(); if(ch>='a'&&ch<='z'&&ch.length===1) onKey(ch);
});
document.getElementById('btnNew').onclick = ()=> newGameRandom();
document.getElementById('btnRefresh').onclick = ()=> refreshBoardSameWord();
document.getElementById('btnGiveUp').onclick = ()=>{
  if(gameOver) return; toast(`It was "${solution.toUpperCase()}".`,1800); endGame(false);
};

/* ======================= GAME LOGIC ========================= */
function onKey(k){
  if(gameOver) return;
  if(k==='Enter'){ submitRow(); return; }
  if(k==='Back'){ if(col>0){ col--; setTile(row,col,""); } return; }
  if(k.length===1 && k>='a' && k<='z'){ if(col<COLS){ setTile(row,col,k); col++; } }
}
function setTile(r,c,ch){
  const tile=board[r][c]; tile.textContent=(ch||"").toUpperCase();
  if(ch) tile.classList.add('filled'); else tile.classList.remove('filled');
}
function getCurrentGuess(){
  let s=""; for(let c=0;c<COLS;c++) s+=(board[row][c].textContent||"").toLowerCase(); return s;
}
function submitRow(){
  if(col<COLS){ toast("Not enough letters"); return; }
  const guess=getCurrentGuess();
  const allowAny=document.getElementById('allowAnyGuess').checked;
  if(!allowAny && !ALLOWED.has(guess)){ toast("Not in word list"); return; }

  const res=Array(COLS).fill('absent'); const freq={};
  for(const ch of solution) freq[ch]=(freq[ch]||0)+1;
  for(let i=0;i<COLS;i++){ if(guess[i]===solution[i]){ res[i]='correct'; freq[guess[i]]--; } }
  for(let i=0;i<COLS;i++){ if(res[i]==='correct') continue;
    const g=guess[i]; if(freq[g]>0){ res[i]='present'; freq[g]--; } }

  flipPaint(row,res,guess);
  if(guess===solution){ setTimeout(()=>{ toast("Genius!"); endGame(true); },620); }
  else if(row===ROWS-1){ setTimeout(()=>{ toast(`It was "${solution.toUpperCase()}".`); endGame(false); },620); }
  else { row++; col=0; }
}
function flipPaint(r,states,guess){
  const delay=220;
  for(let i=0;i<COLS;i++){
    const tile=board[r][i];
    setTimeout(()=>{ tile.classList.add('flip');
      setTimeout(()=>{ tile.classList.remove('flip');
        tile.classList.remove('state-absent','state-present','state-correct');
        tile.classList.add(`state-${states[i]}`); paintKey(guess[i],states[i]);
      },260);
    },i*delay);
  }
}
function paintKey(letter,state){
  const btn=keyboardEl.querySelector(`[data-key="${letter}"]`); if(!btn) return;
  const rank=s=>s==='hint-correct'?3:s==='hint-present'?2:s==='hint-absent'?1:0;
  const nxt=state==='correct'?'hint-correct':state==='present'?'hint-present':'hint-absent';
  const cur=['hint-correct','hint-present','hint-absent'].find(c=>btn.classList.contains(c));
  if(!cur||rank(nxt)>rank(cur)){ btn.classList.remove('hint-correct','hint-present','hint-absent'); btn.classList.add(nxt); }
}
function endGame(win){
  gameOver=true;
  const grid=buildShareGrid();
  const share=`Wordle (Local) ${win?'✓':'✗'}\n${grid}`;
  if(navigator.clipboard) navigator.clipboard.writeText(share).catch(()=>{});
}
function buildShareGrid(){
  const rows=[]; for(let r=0;r<=row;r++){ let line="";
    for(let c=0;c<COLS;c++){ const t=board[r][c];
      if(t.classList.contains('state-correct')) line+="🟩";
      else if(t.classList.contains('state-present')) line+="🟨";
      else line+="⬛";
    } rows.push(line);
  } return rows.join("\n");
}

/* ===================== NEW / REFRESH ======================= */
function resetTilesAndKeys(){
  for(let r=0;r<ROWS;r++) for(let c=0;c<COLS;c++){ const t=board[r][c]; t.textContent=""; t.className="tile"; }
  keyboardEl.querySelectorAll('.key').forEach(k=>k.classList.remove('hint-correct','hint-present','hint-absent'));
  row=0; col=0; gameOver=false;
}
function newGameRandom(){ solution = pickRandom(); resetTilesAndKeys(); toast("New game!"); }
function refreshBoardSameWord(){ resetTilesAndKeys(); toast("Board refreshed"); }

/* ======================== HELPERS ========================== */
function pickRandom(){ return ANSWERS[Math.floor(Math.random()*ANSWERS.length)] || "adieu"; }
function toast(msg,t=1100){ const el=document.getElementById('toast'); el.textContent=msg; el.classList.add('show'); clearTimeout(el._t); el._t=setTimeout(()=>el.classList.remove('show'),t); }

/* ===================== PWA: register SW ==================== */
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('./service-worker.js').catch(()=>{});
  });
}
</script>
</body>
</html>
